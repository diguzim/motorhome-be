name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "development"
        type: choice
        options:
          - "development"
          - "production"

jobs:
  # Development Build - only when manually triggered
  development-build:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment: preview

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: "22.x"

      - name: Run quality checks
        run: |
          echo "üîç Running quality checks..."
          npm audit --audit-level=high || echo "‚ö†Ô∏è Security vulnerabilities found"
          npx tsc --noEmit || echo "‚ö†Ô∏è TypeScript compilation issues found"

      - name: Build for development
        run: |
          echo "üèóÔ∏è Building for development..."
          npm run build
        env:
          NODE_ENV: development

      - name: Build development Docker image
        run: |
          echo "üê≥ Building development Docker image..."
          # Create package-lock.json if it doesn't exist
          if [ ! -f package-lock.json ]; then
            echo "üìù Generating package-lock.json..."
            npm install --package-lock-only
          fi
          docker build -t motorhome-be:dev-${{ github.sha }} .
          echo "‚úÖ Development build completed"

  # Production Build - for main branch and manual production deploys
  production-build:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: "22.x"

      - name: Run comprehensive quality checks
        run: |
          echo "üîç Running comprehensive quality checks..."
          npm audit --audit-level=moderate
          npx tsc --noEmit
          echo "‚úÖ Quality checks passed"

      - name: Build for production
        run: |
          echo "üèóÔ∏è Building for production..."
          npm run build
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.CONTAINER_REGISTRY_URL }}/motorhome-be:latest
            ${{ secrets.CONTAINER_REGISTRY_URL }}/motorhome-be:${{ github.sha }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Deploy to production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Deploying to production..."
          echo "üì¶ Docker image: ${{ secrets.CONTAINER_REGISTRY_URL }}/motorhome-be:${{ github.sha }}"
          echo "üåç Environment: production"

          # Deployment commands would go here
          # Example: SSH to server and update containers
          # ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} \
          #   "cd /opt/motorhome-be && docker compose pull && docker compose up -d"

          echo "‚úÖ Production deployment completed"
