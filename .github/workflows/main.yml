name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "development"
        type: choice
        options:
          - "development"
          - "production"

jobs:
  # Development Build - only when manually triggered
  development-build:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment: preview

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: "22.x"

      - name: Run quality checks
        continue-on-error: true
        run: |
          echo "🔍 Running quality checks..."
          echo "📊 Security Audit Report:"
          npm audit --audit-level=high || echo "⚠️ Security vulnerabilities found (non-blocking)"
          echo ""
          echo "📝 TypeScript Compilation Report:"
          npx tsc --noEmit || echo "⚠️ TypeScript compilation issues found (non-blocking)"
          echo "✅ Quality checks completed (informational only)"

      - name: Build for development
        run: |
          echo "🏗️ Building for development..."
          npm run build
        env:
          NODE_ENV: development

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Test registry connection
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing registry connection..."

          # GitHub Container Registry format
          TEST_REPO="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be-test"

          # Test registry push capability
          docker pull alpine:latest > /dev/null 2>&1
          docker tag alpine:latest "$TEST_REPO:${{ github.run_id }}"

          if docker push "$TEST_REPO:${{ github.run_id }}" > /dev/null 2>&1; then
            echo "✅ Registry connection verified"
            docker image rm "$TEST_REPO:${{ github.run_id }}" > /dev/null 2>&1 || true
          else
            echo "⚠️ Registry test failed - proceeding with main build"
          fi

      - name: Build development Docker image
        run: |
          echo "🐳 Building development Docker image..."
          # Create package-lock.json if it doesn't exist
          if [ ! -f package-lock.json ]; then
            echo "📝 Generating package-lock.json..."
            npm install --package-lock-only
          fi
          docker build -t motorhome-be:dev-${{ github.sha }} .
          echo "✅ Development build completed"

      - name: Push development Docker image
        if: github.event_name != 'pull_request'
        run: |
          # GitHub Container Registry format
          REPO_NAME="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be"

          # Tag and push development image
          docker tag motorhome-be:dev-${{ github.sha }} "$REPO_NAME:dev-${{ github.sha }}"
          docker tag motorhome-be:dev-${{ github.sha }} "$REPO_NAME:dev-latest"

          docker push "$REPO_NAME:dev-${{ github.sha }}"
          docker push "$REPO_NAME:dev-latest"

          echo "✅ Development image pushed: $REPO_NAME:dev-${{ github.sha }}"

      - name: Test VPS connection and prepare deployment
        run: |
          echo "🔐 Testing VPS connection..."

          # Set up SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # GitHub Container Registry format
          REPO_NAME="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be"

          # Test VPS connection and create deployment info
          ssh -i ~/.ssh/vps_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            echo "VPS connection successful at \$(date)" > /tmp/deployment-info-dev.txt
            echo "Environment: Development" >> /tmp/deployment-info-dev.txt
            echo "Commit SHA: ${{ github.sha }}" >> /tmp/deployment-info-dev.txt
            echo "Docker image: $REPO_NAME:dev-${{ github.sha }}" >> /tmp/deployment-info-dev.txt
            echo "Deployment ready: \$(date)" >> /tmp/deployment-info-dev.txt
            
            # Test Docker availability
            if command -v docker &> /dev/null; then
              echo "Docker: Available" >> /tmp/deployment-info-dev.txt
              docker --version >> /tmp/deployment-info-dev.txt
            else
              echo "Docker: Not installed" >> /tmp/deployment-info-dev.txt
            fi
            
            cat /tmp/deployment-info-dev.txt
          EOF

          echo "✅ VPS connection verified and development deployment info created"

  # Production Build - for main branch and manual production deploys
  production-build:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: "22.x"

      - name: Run comprehensive quality checks
        continue-on-error: true
        run: |
          echo "🔍 Running comprehensive quality checks..."
          echo "📊 Security Audit Report (moderate level):"
          npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities found (non-blocking)"
          echo ""
          echo "📝 TypeScript Compilation Report:"
          npx tsc --noEmit || echo "⚠️ TypeScript compilation issues found (non-blocking)"
          echo ""
          echo "📦 Package Health Check:"
          npm outdated || echo "📋 Package versions checked"
          echo "✅ Quality checks completed (informational only)"

      - name: Build for production
        run: |
          echo "🏗️ Building for production..."
          npm run build
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Test registry connection
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing registry connection..."

          # GitHub Container Registry format
          TEST_REPO="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be-test"

          # Test registry push capability
          docker pull alpine:latest > /dev/null 2>&1
          docker tag alpine:latest "$TEST_REPO:${{ github.run_id }}"

          if docker push "$TEST_REPO:${{ github.run_id }}" > /dev/null 2>&1; then
            echo "✅ Registry connection verified"
            docker image rm "$TEST_REPO:${{ github.run_id }}" > /dev/null 2>&1 || true
          else
            echo "⚠️ Registry test failed - proceeding with main build"
          fi

      - name: Build and push production Docker image
        if: github.event_name != 'pull_request'
        run: |
          # GitHub Container Registry format
          REPO_NAME="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be"

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg NODE_ENV=production \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --file ./Dockerfile.prod \
            --tag "$REPO_NAME:latest" \
            --tag "$REPO_NAME:${{ github.sha }}" \
            --push \
            .

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."

          REPO_NAME="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be"

          echo "📦 Docker image: $REPO_NAME:${{ github.sha }}"
          echo "🌍 Environment: production"

          # Deployment commands would go here
          # Example: SSH to server and update containers
          # ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} \
          #   "cd /opt/motorhome-be && docker compose pull && docker compose up -d"

          echo "✅ Production deployment completed"

      - name: Test VPS connection and prepare deployment
        run: |
          echo "🔐 Testing VPS connection..."

          # Set up SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # GitHub Container Registry format
          REPO_NAME="${{ secrets.CONTAINER_REGISTRY_URL }}/${{ secrets.CONTAINER_REGISTRY_USERNAME }}/motorhome-be"

          # Test VPS connection and create deployment info
          ssh -i ~/.ssh/vps_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            echo "VPS connection successful at \$(date)" > /tmp/deployment-info.txt
            echo "Commit SHA: ${{ github.sha }}" >> /tmp/deployment-info.txt
            echo "Docker image: $REPO_NAME:${{ github.sha }}" >> /tmp/deployment-info.txt
            echo "Deployment ready: \$(date)" >> /tmp/deployment-info.txt
            
            # Test Docker availability
            if command -v docker &> /dev/null; then
              echo "Docker: Available" >> /tmp/deployment-info.txt
              docker --version >> /tmp/deployment-info.txt
            else
              echo "Docker: Not installed" >> /tmp/deployment-info.txt
            fi
            
            cat /tmp/deployment-info.txt
          EOF

          echo "✅ VPS connection verified and deployment info created"
